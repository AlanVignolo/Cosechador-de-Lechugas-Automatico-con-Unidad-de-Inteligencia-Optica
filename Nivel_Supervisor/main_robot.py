import logging
import sys
import time
from controller.uart_manager import UARTManager
from controller.command_manager import CommandManager
from controller.robot_controller import RobotController
from config.robot_config import RobotConfig
from controller.robot_controller import RobotController
from controller.trajectories import TrajectoryDefinitions, get_trajectory_time_estimate

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_connection():
    """Probar conexi√≥n b√°sica"""
    print("üîå Probando conexi√≥n UART...")
    
    uart = UARTManager(RobotConfig.SERIAL_PORT, RobotConfig.BAUD_RATE)
    
    if not uart.connect():
        print("‚ùå No se pudo conectar al robot")
        return False
    
    print("‚úÖ Conectado al robot")
    
    # Probar comando b√°sico
    cmd_manager = CommandManager(uart)
    result = cmd_manager.emergency_stop()  # Comando seguro
    
    if result["success"]:
        print("‚úÖ Comunicaci√≥n funcionando")
        print(f"   Respuesta: {result['response']}")
    else:
        print("‚ùå Error en comunicaci√≥n")
        print(f"   Error: {result.get('error', 'Desconocido')}")
    
    uart.disconnect()
    return result["success"]

def test_basic_movements():
    """Probar movimientos b√°sicos"""
    print("\nü§ñ Probando movimientos b√°sicos...")
    
    uart = UARTManager(RobotConfig.SERIAL_PORT, RobotConfig.BAUD_RATE)
    if not uart.connect():
        return False
    
    cmd_manager = CommandManager(uart)
    
    # Configurar velocidades normales
    print("   Configurando velocidades...")
    result = cmd_manager.set_velocities(
        RobotConfig.NORMAL_SPEED_H, 
        RobotConfig.NORMAL_SPEED_V
    )
    print(f"   Velocidades: {result['response']}")
    
    # Movimiento peque√±o de prueba
    print("   Movimiento peque√±o (10mm, 10mm)...")
    result = cmd_manager.move_xy(10, 10)
    print(f"   Resultado: {result['response']}")
    
    # Probar brazo
    print("   Moviendo brazo a posici√≥n inicial...")
    result = cmd_manager.reset_arm()
    print(f"   Brazo: {result['response']}")
    
    uart.disconnect()
    return True

def enviar_movimiento_brazo(cmd_manager):
    """Funci√≥n igual que en el script de pruebas"""
    print("\n" + "="*50)
    print("CONTROL DE BRAZO - MOVIMIENTO SUAVE")
    print("="*50)
    
    angle1 = input("√Ångulo Servo 1 (0-180): ")
    angle2 = input("√Ångulo Servo 2 (0-180): ")
    tiempo = input("Tiempo en ms (0 para instant√°neo): ")
    
    result = cmd_manager.move_arm(int(angle1), int(angle2), int(tiempo))
    print(f"Respuesta: {result['response']}")

def menu_control_brazo(arm_controller):
    """Submenu simple para control del brazo por estados"""
    while True:
        status = arm_controller.get_current_state()
        
        print("\n" + "="*50)
        print("ü§ñ CONTROL DEL BRAZO")
        print("="*50)
        print(f"üìç Estado actual: {status['state']}")
        print(f"üìê Posici√≥n: Servo1={status['position'][0]}¬∞, Servo2={status['position'][1]}¬∞")
        gripper_status = arm_controller.get_gripper_real_status()
        if gripper_status["success"]:
            print(f"üîß Gripper: {gripper_status['state']} (pos: {gripper_status['position']})")
        else:
            print(f"üîß Gripper: {status['gripper']} (sin confirmar)")
        
        # Mostrar advertencia si est√° en estado desconocido
        if not status['is_known']:
            print("‚ö†Ô∏è  Estado desconocido - la posici√≥n no coincide con ning√∫n estado definido")
        
        print("="*50)
        print("ESTADOS DISPONIBLES:")
        
        # Mostrar TODOS los estados disponibles
        all_states = arm_controller.list_available_states()
        for i, state in enumerate(all_states, 1):
            # Marcar el estado actual
            if state == status['state']:
                print(f"  {i}. ‚úÖ {state} (ACTUAL)")
            else:
                print(f"  {i}. ‚ö™ {state}")
        
        print("-"*50)
        print("r. üîÑ Redetectar estado actual")
        print("0. Volver al men√∫ principal")
        print("-"*50)
        
        opcion = input("Selecciona estado (n√∫mero): ").strip()
        
        if opcion == '0':
            break
        elif opcion == 'r':
            print("üîÑ Redetectando estado actual...")
            arm_controller._detect_initial_state()
            print(f"‚úÖ Estado redetectado: {arm_controller.current_state}")
        elif opcion.isdigit():
            state_index = int(opcion) - 1
            if 0 <= state_index < len(all_states):
                target_state = all_states[state_index]
                
                if target_state == status['state']:
                    print(f"‚úÖ Ya est√°s en el estado '{target_state}'")
                else:
                    print(f"üéØ Intentando ir al estado: {target_state}")
                    result = arm_controller.change_state(target_state)
                    
                    if result["success"]:
                        print(f"‚úÖ {result['message']}")
                    else:
                        print(f"‚ùå No se puede ir a '{target_state}': {result['message']}")
            else:
                print("‚ùå N√∫mero inv√°lido")
        else:
            print("‚ùå Opci√≥n inv√°lida")

        input("\nüì± Presiona Enter para continuar...")

def menu_interactivo(uart_manager):
    """Men√∫ que usa una conexi√≥n UART ya establecida"""
    cmd_manager = CommandManager(uart_manager)
    robot = RobotController(cmd_manager)  # ‚≠ê CREAR UNA SOLA VEZ AL PRINCIPIO
    
    while True:
        print("\n" + "="*50)
        print("CONTROL DE ROBOT - MEN√ö PRINCIPAL")
        print("="*50)
        print("1. Mover a posici√≥n X,Y")
        print("2. Mover brazos (suave)")
        print("3. Mover servo individual")
        print("4. Resetear brazos a 90¬∞")
        print("5. üè† HOMING")
        print("6. Control Gripper")
        print("7. PARADA DE EMERGENCIA")
        print("8. Estado del robot")
        print("9. ü§ñ CONTROL DE BRAZO POR ESTADOS")
        print("0. Salir")
        print("-"*50)
        opcion = input("Selecciona opci√≥n: ")

        if opcion == '1':
            x = input("Posici√≥n X (mm): ")
            y = input("Posici√≥n Y (mm): ")
            result = cmd_manager.move_xy(float(x), float(y))
            print(f"Respuesta: {result['response']}")
            
        elif opcion == '2':
            enviar_movimiento_brazo(cmd_manager)
            
        elif opcion == '3':
            servo = input("N√∫mero de servo (1 o 2): ")
            angulo = input("√Ångulo (0-180): ")
            result = cmd_manager.move_servo(int(servo), int(angulo))
            print(f"Respuesta: {result['response']}")
            
        elif opcion == '4':
            result = cmd_manager.reset_arm()
            print(f"Respuesta: {result['response']}")
            
        elif opcion == '5':
            print("üè† MEN√ö DE CALIBRACI√ìN")
            print("1. Homing normal")
            print("2. üîß Calibraci√≥n completa del workspace")
            calib_opt = input("Opci√≥n: ")
            
            if calib_opt == '1':
                # ‚≠ê HOMING NORMAL EXISTENTE
                print("üè† INICIANDO SECUENCIA DE HOMING")
                print("‚ö†Ô∏è  ASEG√öRATE DE QUE EL ROBOT TENGA ESPACIO LIBRE")
                confirmar = input("¬øContinuar? (s/N): ")
                
                if confirmar.lower() == 's':
                    result = robot.home_robot()
                    
                    if result["success"]:
                        print("‚úÖ HOMING COMPLETADO")
                        print(f"   Posici√≥n actual: {result.get('position', 'N/A')}")
                    else:
                        print("‚ùå ERROR EN HOMING")
                        print(f"   {result['message']}")
                else:
                    print("Homing cancelado")
                    
            elif calib_opt == '2':
                print("üîß INICIANDO CALIBRACI√ìN COMPLETA DEL WORKSPACE")
                print("‚ö†Ô∏è  Esto tomar√° varios minutos y medir√° todo el √°rea de trabajo")
                confirmar = input("¬øContinuar? (s/N): ")
                
                if confirmar.lower() == 's':
                    result = robot.calibrate_workspace()
                    if result["success"]:
                        print("‚úÖ CALIBRACI√ìN COMPLETADA")
                        print(f"üìä Medidas: {result['measurements']}")
                    else:
                        print("‚ùå ERROR EN CALIBRACI√ìN")
                        print(f"   {result['message']}")
                else:
                    print("Calibraci√≥n cancelada")
            else:
                print("‚ùå Opci√≥n inv√°lida")
            
        elif opcion == '6':
            print("\nControl de Gripper:")
            print("1. üîÑ Accionar Gripper (abre si est√° cerrado, cierra si est√° abierto)")
            print("2. üìä Consultar estado")
            gripper_opt = input("Opci√≥n: ")
            
            if gripper_opt == '1':
                result = cmd_manager.gripper_toggle()
                print(f"Respuesta: {result['response']}")
            elif gripper_opt == '2':
                result = cmd_manager.get_gripper_status()
                print(f"Estado: {result['response']}")
            else:
                print("Opci√≥n inv√°lida")
                continue
            
        elif opcion == '7':
            result = cmd_manager.emergency_stop()
            print(f"Respuesta: {result['response']}")
            
        elif opcion == '8':
            status = robot.get_status()  # ‚≠ê USAR LA INSTANCIA YA CREADA
            print(f"üìä Estado del robot:")
            print(f"   Homed: {'‚úÖ' if status['homed'] else '‚ùå'}")
            print(f"   Posici√≥n: X={status['position']['x']}mm, Y={status['position']['y']}mm")
            print(f"   Brazo: {status['arm']}")
            print(f"   Gripper: {status['gripper']}")
            
        elif opcion == '9':
            menu_control_brazo(robot.arm)  # ‚≠ê USAR LA INSTANCIA YA CREADA
            
        elif opcion == '0':
            print("Saliendo...")
            break
        else:
            print("Opci√≥n inv√°lida")
    
    uart.disconnect()

if __name__ == "__main__":
    print("üöÄ CLAUDIO - Control Supervisor del Robot")
    print("=" * 50)
    
    # Verificar configuraci√≥n
    print(f"Puerto: {RobotConfig.SERIAL_PORT}")
    print(f"Baudios: {RobotConfig.BAUD_RATE}")
    
    print("üîå Conectando al robot...")
    
    # UNA SOLA conexi√≥n para todo
    uart = UARTManager(RobotConfig.SERIAL_PORT, RobotConfig.BAUD_RATE)
    
    if uart.connect():
        print("‚úÖ Conectado al robot")
        
        # Test r√°pido
        cmd_manager = CommandManager(uart)
        result = cmd_manager.emergency_stop()
        if result["success"]:
            print("‚úÖ Comunicaci√≥n OK")
        
        # Ir directo al men√∫ (sin desconectar)
        menu_interactivo(uart)
        
        uart.disconnect()
    else:
        print("‚ùå No se pudo conectar")