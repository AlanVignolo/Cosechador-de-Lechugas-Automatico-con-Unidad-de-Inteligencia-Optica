#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
COSECHADOR AUTOM√ÅTICO CLAUDIO
==============================

Sistema automatizado completo para cosecha de lechugas
Incluye m√°quina de estados, mapeo de cultivos y ciclos de cosecha

Autor: Sistema CLAUDIO
Fecha: 2025-09-21
"""

import logging
import sys
import os
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# Agregar paths para importaciones
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# Importar componentes del sistema
try:
    from controller.robot_controller import RobotController
    from controller.command_manager import CommandManager
    from controller.uart_manager import UARTManager
    from controller.robot_state_machine import RobotStateMachine
    from config.robot_config import RobotConfig
    from camera_manager import get_camera_manager
    print("‚úÖ Todos los m√≥dulos del sistema importados correctamente")
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos del sistema: {e}")
    print("Verificar que todos los archivos est√©n en su lugar")
    sys.exit(1)

def mostrar_banner():
    """Mostrar banner de bienvenida del cosechador autom√°tico"""
    print("\n" + "="*80)
    print("ü§ñ COSECHADOR AUTOM√ÅTICO CLAUDIO v1.0")
    print("="*80)
    print("Sistema de cosecha automatizada de lechugas")
    print("Desarrollado para el Proyecto Final de Ingenier√≠a")
    print(f"Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*80)

def mostrar_menu_principal():
    """Mostrar men√∫ principal del cosechador autom√°tico"""
    print("\n" + "="*60)
    print("üìã MEN√ö PRINCIPAL - COSECHADOR AUTOM√ÅTICO")
    print("="*60)
    print("1. üöÄ INICIO TOTAL (primera vez)")
    print("   ‚îî‚îÄ Homing + Mapeo Completo + Cosecha")
    print("")
    print("2. üîÑ ESC√ÅNER DIARIO (uso diario)")
    print("   ‚îî‚îÄ Solo ciclo de cosecha con mapeo existente")
    print("")
    print("3. üìä DATOS DEL SISTEMA (diagn√≥stico)")
    print("   ‚îî‚îÄ Estado completo: hardware, configuraci√≥n, estad√≠sticas")
    print("")
    print("4. ‚öôÔ∏è CONFIGURACI√ìN AVANZADA")
    print("   ‚îî‚îÄ Ajustes del sistema y par√°metros")
    print("")
    print("0. ‚ùå SALIR")
    print("="*60)

def menu_configuracion_avanzada(state_machine):
    """Men√∫ de configuraci√≥n avanzada"""
    while True:
        print("\n" + "="*50)
        print("‚öôÔ∏è CONFIGURACI√ìN AVANZADA")
        print("="*50)
        print("1. üè† Solo Homing")
        print("2. üåø Solo Mapeo de Cultivo")
        print("3. üõ†Ô∏è Solo Mapeo de Recursos")
        print("4. üîß Reiniciar Configuraci√≥n")
        print("5. üìã Ver Estado de la M√°quina")
        print("0. ‚Üê Volver al men√∫ principal")
        print("-"*50)
        
        opcion = input("Opci√≥n: ").strip()
        
        if opcion == '1':
            print("\nüè† EJECUTANDO SOLO HOMING...")
            try:
                success = state_machine._execute_homing()
                if success:
                    print("‚úÖ Homing completado")
                else:
                    print("‚ùå Error en homing")
            except Exception as e:
                print(f"‚ùå Error: {e}")
                
        elif opcion == '2':
            print("\nüåø EJECUTANDO SOLO MAPEO DE CULTIVO...")
            try:
                success = state_machine._execute_mapeo_cultivo()
                if success:
                    print("‚úÖ Mapeo de cultivo completado")
                else:
                    print("‚ùå Error en mapeo de cultivo")
            except Exception as e:
                print(f"‚ùå Error: {e}")
                
        elif opcion == '3':
            print("\nüõ†Ô∏è EJECUTANDO SOLO MAPEO DE RECURSOS...")
            try:
                success = state_machine._execute_mapeo_recursos()
                if success:
                    print("‚úÖ Mapeo de recursos completado")
                else:
                    print("‚ùå Error en mapeo de recursos")
            except Exception as e:
                print(f"‚ùå Error: {e}")
                
        elif opcion == '4':
            print("\nüîß REINICIANDO CONFIGURACI√ìN...")
            confirmar = input("¬øEst√°s seguro? Esto borrar√° todos los datos (s/N): ")
            if confirmar.lower() == 's':
                try:
                    # Reiniciar estad√≠sticas
                    state_machine.statistics.reset_totals()
                    # Limpiar recursos
                    state_machine.resources.plantines = None
                    state_machine.resources.cesto = None
                    state_machine._save_state_data()
                    print("‚úÖ Configuraci√≥n reiniciada")
                except Exception as e:
                    print(f"‚ùå Error: {e}")
            else:
                print("Operaci√≥n cancelada")
                
        elif opcion == '5':
            print("\nüìã ESTADO DE LA M√ÅQUINA:")
            status = state_machine.get_status()
            print(f"Estado actual: {status['current_state']}")
            print(f"Operaci√≥n activa: {status['operation_active']}")
            print(f"Robot homed: {status['robot_status']['homed']}")
            print(f"Recursos mapeados: {status['resources']['all_mapped']}")
            
        elif opcion == '0':
            break
        else:
            print("‚ùå Opci√≥n inv√°lida")

def inicializar_sistema():
    """Inicializar el sistema del robot"""
    print("\nüîß INICIALIZANDO SISTEMA...")
    
    # Inicializar gestor de c√°mara
    print("üì∑ Inicializando c√°mara...")
    try:
        camera_mgr = get_camera_manager()
        if camera_mgr.initialize_camera():
            print("‚úÖ C√°mara inicializada")
        else:
            print("‚ö†Ô∏è Advertencia: C√°mara no disponible")
    except Exception as e:
        print(f"‚ö†Ô∏è Error con c√°mara: {e}")
    
    # Detectar plataforma y configurar puerto
    detected_platform = RobotConfig.auto_detect_platform()
    serial_port = RobotConfig.get_serial_port()
    
    print(f"üñ•Ô∏è Plataforma: {detected_platform}")
    print(f"üì° Puerto serial: {serial_port}")
    print(f"‚ö° Baudios: {RobotConfig.BAUD_RATE}")
    
    # Conectar al robot
    print("üîå Conectando al robot...")
    uart = UARTManager(serial_port, RobotConfig.BAUD_RATE)
    
    if not uart.connect():
        print("‚ùå ERROR: No se pudo conectar al robot")
        print("Verificar:")
        print("  - Cable USB conectado")
        print("  - Puerto serial correcto")
        print("  - Robot encendido")
        return None, None
    
    print("‚úÖ Conectado al robot")
    
    # Crear controladores
    cmd_manager = CommandManager(uart)
    
    # Verificar comunicaci√≥n inicial
    print("üß™ Verificando comunicaci√≥n...")
    result = cmd_manager.emergency_stop()
    if not result["success"]:
        print("‚ùå ERROR: Fallo en comunicaci√≥n inicial")
        uart.disconnect()
        return None, None
    
    print("‚úÖ Comunicaci√≥n verificada")
    
    # Crear controlador del robot
    robot = RobotController(cmd_manager)
    print("‚úÖ Sistema inicializado correctamente")
    
    return uart, robot

def main():
    """Funci√≥n principal del cosechador autom√°tico"""
    mostrar_banner()
    
    # Inicializar sistema
    uart, robot = inicializar_sistema()
    if uart is None or robot is None:
        print("\n‚ùå FALLO EN INICIALIZACI√ìN - ABORTANDO")
        return
    
    # Crear m√°quina de estados
    print("üîÑ Creando m√°quina de estados...")
    try:
        state_machine = RobotStateMachine(robot)
        print("‚úÖ M√°quina de estados lista")
    except Exception as e:
        print(f"‚ùå Error creando m√°quina de estados: {e}")
        uart.disconnect()
        return
    
    # Men√∫ principal
    try:
        while True:
            mostrar_menu_principal()
            opcion = input("\nüëâ Selecciona opci√≥n (0-4): ").strip()
            
            if opcion == '1':
                print("\n" + "üöÄ"*20)
                print("INICIANDO SECUENCIA COMPLETA")
                print("üöÄ"*20)
                print("Esta operaci√≥n puede tomar varios minutos...")
                print("Presiona Ctrl+C para interrumpir si es necesario")
                
                try:
                    success = state_machine.inicio_total()
                    if success:
                        print("\n" + "‚úÖ"*20)
                        print("INICIO TOTAL COMPLETADO EXITOSAMENTE")
                        print("‚úÖ"*20)
                    else:
                        print("\n" + "‚ùå"*20)
                        print("INICIO TOTAL FALL√ì")
                        print("‚ùå"*20)
                        
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è OPERACI√ìN INTERRUMPIDA POR EL USUARIO")
                    state_machine.stop_operation()
                except Exception as e:
                    print(f"\n‚ùå ERROR DURANTE INICIO TOTAL: {e}")
                    import traceback
                    traceback.print_exc()
                
            elif opcion == '2':
                print("\n" + "üîÑ"*20)
                print("INICIANDO ESC√ÅNER DIARIO")
                print("üîÑ"*20)
                
                try:
                    success = state_machine.escaner_diario()
                    if success:
                        print("\n" + "‚úÖ"*20)
                        print("ESC√ÅNER DIARIO COMPLETADO")
                        print("‚úÖ"*20)
                    else:
                        print("\n" + "‚ùå"*20)
                        print("ESC√ÅNER DIARIO FALL√ì")
                        print("‚ùå"*20)
                        
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è OPERACI√ìN INTERRUMPIDA POR EL USUARIO")
                    state_machine.stop_operation()
                except Exception as e:
                    print(f"\n‚ùå ERROR DURANTE ESC√ÅNER DIARIO: {e}")
                    import traceback
                    traceback.print_exc()
                
            elif opcion == '3':
                try:
                    state_machine.mostrar_datos()
                except Exception as e:
                    print(f"\n‚ùå ERROR MOSTRANDO DATOS: {e}")
                    import traceback
                    traceback.print_exc()
                
            elif opcion == '4':
                menu_configuracion_avanzada(state_machine)
                
            elif opcion == '0':
                print("\nüëã FINALIZANDO COSECHADOR AUTOM√ÅTICO...")
                break
                
            else:
                print("‚ùå Opci√≥n inv√°lida. Use 0-4.")
            
            # Pausa antes de mostrar men√∫ nuevamente
            if opcion != '0':
                input("\nüì± Presiona ENTER para continuar...")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è INTERRUPCI√ìN DE TECLADO DETECTADA")
    except Exception as e:
        print(f"\n‚ùå ERROR INESPERADO: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Limpieza final
        print("\nüßπ LIBERANDO RECURSOS...")
        try:
            camera_mgr = get_camera_manager()
            camera_mgr.release_camera()
            print("‚úÖ C√°mara liberada")
        except:
            pass
        
        try:
            uart.disconnect()
            print("‚úÖ UART desconectado")
        except:
            pass
        
        print("\n" + "="*60)
        print("üèÅ COSECHADOR AUTOM√ÅTICO FINALIZADO")
        print(f"Hora de finalizaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("¬°Gracias por usar el sistema CLAUDIO!")
        print("="*60)

if __name__ == "__main__":
    main()
